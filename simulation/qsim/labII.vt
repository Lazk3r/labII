// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/24/2023 23:34:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    labII
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module labII_vlg_sample_tst(
	clk_28MHz,
	hora_alarma,
	sampler_tx
);
input  clk_28MHz;
input  hora_alarma;
output sampler_tx;

reg sample;
time current_time;
always @(clk_28MHz or hora_alarma)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module labII_vlg_check_tst (
	disp_hour_dec,
	disp_hour_units,
	disp_min_dec,
	disp_min_units,
	disp_sec_dec,
	disp_sec_units,
	sampler_rx
);
input [6:0] disp_hour_dec;
input [6:0] disp_hour_units;
input [6:0] disp_min_dec;
input [6:0] disp_min_units;
input [6:0] disp_sec_dec;
input [6:0] disp_sec_units;
input sampler_rx;

reg [6:0] disp_hour_dec_expected;
reg [6:0] disp_hour_units_expected;
reg [6:0] disp_min_dec_expected;
reg [6:0] disp_min_units_expected;
reg [6:0] disp_sec_dec_expected;
reg [6:0] disp_sec_units_expected;

reg [6:0] disp_hour_dec_prev;
reg [6:0] disp_hour_units_prev;
reg [6:0] disp_min_dec_prev;
reg [6:0] disp_min_units_prev;
reg [6:0] disp_sec_dec_prev;
reg [6:0] disp_sec_units_prev;

reg [6:0] disp_hour_dec_expected_prev;
reg [6:0] disp_hour_units_expected_prev;
reg [6:0] disp_min_dec_expected_prev;
reg [6:0] disp_min_units_expected_prev;
reg [6:0] disp_sec_dec_expected_prev;
reg [6:0] disp_sec_units_expected_prev;

reg [6:0] last_disp_hour_dec_exp;
reg [6:0] last_disp_hour_units_exp;
reg [6:0] last_disp_min_dec_exp;
reg [6:0] last_disp_min_units_exp;
reg [6:0] last_disp_sec_dec_exp;
reg [6:0] last_disp_sec_units_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	disp_hour_dec_prev = disp_hour_dec;
	disp_hour_units_prev = disp_hour_units;
	disp_min_dec_prev = disp_min_dec;
	disp_min_units_prev = disp_min_units;
	disp_sec_dec_prev = disp_sec_dec;
	disp_sec_units_prev = disp_sec_units;
end

// update expected /o prevs

always @(trigger)
begin
	disp_hour_dec_expected_prev = disp_hour_dec_expected;
	disp_hour_units_expected_prev = disp_hour_units_expected;
	disp_min_dec_expected_prev = disp_min_dec_expected;
	disp_min_units_expected_prev = disp_min_units_expected;
	disp_sec_dec_expected_prev = disp_sec_dec_expected;
	disp_sec_units_expected_prev = disp_sec_units_expected;
end


// expected disp_hour_dec[ 6 ]
initial
begin
	disp_hour_dec_expected[6] = 1'bX;
end 
// expected disp_hour_dec[ 5 ]
initial
begin
	disp_hour_dec_expected[5] = 1'bX;
end 
// expected disp_hour_dec[ 4 ]
initial
begin
	disp_hour_dec_expected[4] = 1'bX;
end 
// expected disp_hour_dec[ 3 ]
initial
begin
	disp_hour_dec_expected[3] = 1'bX;
end 
// expected disp_hour_dec[ 2 ]
initial
begin
	disp_hour_dec_expected[2] = 1'bX;
end 
// expected disp_hour_dec[ 1 ]
initial
begin
	disp_hour_dec_expected[1] = 1'bX;
end 
// expected disp_hour_dec[ 0 ]
initial
begin
	disp_hour_dec_expected[0] = 1'bX;
end 
// expected disp_hour_units[ 6 ]
initial
begin
	disp_hour_units_expected[6] = 1'bX;
end 
// expected disp_hour_units[ 5 ]
initial
begin
	disp_hour_units_expected[5] = 1'bX;
end 
// expected disp_hour_units[ 4 ]
initial
begin
	disp_hour_units_expected[4] = 1'bX;
end 
// expected disp_hour_units[ 3 ]
initial
begin
	disp_hour_units_expected[3] = 1'bX;
end 
// expected disp_hour_units[ 2 ]
initial
begin
	disp_hour_units_expected[2] = 1'bX;
end 
// expected disp_hour_units[ 1 ]
initial
begin
	disp_hour_units_expected[1] = 1'bX;
end 
// expected disp_hour_units[ 0 ]
initial
begin
	disp_hour_units_expected[0] = 1'bX;
end 
// expected disp_min_dec[ 6 ]
initial
begin
	disp_min_dec_expected[6] = 1'bX;
end 
// expected disp_min_dec[ 5 ]
initial
begin
	disp_min_dec_expected[5] = 1'bX;
end 
// expected disp_min_dec[ 4 ]
initial
begin
	disp_min_dec_expected[4] = 1'bX;
end 
// expected disp_min_dec[ 3 ]
initial
begin
	disp_min_dec_expected[3] = 1'bX;
end 
// expected disp_min_dec[ 2 ]
initial
begin
	disp_min_dec_expected[2] = 1'bX;
end 
// expected disp_min_dec[ 1 ]
initial
begin
	disp_min_dec_expected[1] = 1'bX;
end 
// expected disp_min_dec[ 0 ]
initial
begin
	disp_min_dec_expected[0] = 1'bX;
end 
// expected disp_min_units[ 6 ]
initial
begin
	disp_min_units_expected[6] = 1'bX;
end 
// expected disp_min_units[ 5 ]
initial
begin
	disp_min_units_expected[5] = 1'bX;
end 
// expected disp_min_units[ 4 ]
initial
begin
	disp_min_units_expected[4] = 1'bX;
end 
// expected disp_min_units[ 3 ]
initial
begin
	disp_min_units_expected[3] = 1'bX;
end 
// expected disp_min_units[ 2 ]
initial
begin
	disp_min_units_expected[2] = 1'bX;
end 
// expected disp_min_units[ 1 ]
initial
begin
	disp_min_units_expected[1] = 1'bX;
end 
// expected disp_min_units[ 0 ]
initial
begin
	disp_min_units_expected[0] = 1'bX;
end 
// expected disp_sec_dec[ 6 ]
initial
begin
	disp_sec_dec_expected[6] = 1'bX;
end 
// expected disp_sec_dec[ 5 ]
initial
begin
	disp_sec_dec_expected[5] = 1'bX;
end 
// expected disp_sec_dec[ 4 ]
initial
begin
	disp_sec_dec_expected[4] = 1'bX;
end 
// expected disp_sec_dec[ 3 ]
initial
begin
	disp_sec_dec_expected[3] = 1'bX;
end 
// expected disp_sec_dec[ 2 ]
initial
begin
	disp_sec_dec_expected[2] = 1'bX;
end 
// expected disp_sec_dec[ 1 ]
initial
begin
	disp_sec_dec_expected[1] = 1'bX;
end 
// expected disp_sec_dec[ 0 ]
initial
begin
	disp_sec_dec_expected[0] = 1'bX;
end 
// expected disp_sec_units[ 6 ]
initial
begin
	disp_sec_units_expected[6] = 1'bX;
end 
// expected disp_sec_units[ 5 ]
initial
begin
	disp_sec_units_expected[5] = 1'bX;
end 
// expected disp_sec_units[ 4 ]
initial
begin
	disp_sec_units_expected[4] = 1'bX;
end 
// expected disp_sec_units[ 3 ]
initial
begin
	disp_sec_units_expected[3] = 1'bX;
end 
// expected disp_sec_units[ 2 ]
initial
begin
	disp_sec_units_expected[2] = 1'bX;
end 
// expected disp_sec_units[ 1 ]
initial
begin
	disp_sec_units_expected[1] = 1'bX;
end 
// expected disp_sec_units[ 0 ]
initial
begin
	disp_sec_units_expected[0] = 1'bX;
end 
// generate trigger
always @(disp_hour_dec_expected or disp_hour_dec or disp_hour_units_expected or disp_hour_units or disp_min_dec_expected or disp_min_dec or disp_min_units_expected or disp_min_units or disp_sec_dec_expected or disp_sec_dec or disp_sec_units_expected or disp_sec_units)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected disp_hour_dec = %b | expected disp_hour_units = %b | expected disp_min_dec = %b | expected disp_min_units = %b | expected disp_sec_dec = %b | expected disp_sec_units = %b | ",disp_hour_dec_expected_prev,disp_hour_units_expected_prev,disp_min_dec_expected_prev,disp_min_units_expected_prev,disp_sec_dec_expected_prev,disp_sec_units_expected_prev);
	$display("| real disp_hour_dec = %b | real disp_hour_units = %b | real disp_min_dec = %b | real disp_min_units = %b | real disp_sec_dec = %b | real disp_sec_units = %b | ",disp_hour_dec_prev,disp_hour_units_prev,disp_min_dec_prev,disp_min_units_prev,disp_sec_dec_prev,disp_sec_units_prev);
`endif
	if (
		( disp_hour_dec_expected_prev[0] !== 1'bx ) && ( disp_hour_dec_prev[0] !== disp_hour_dec_expected_prev[0] )
		&& ((disp_hour_dec_expected_prev[0] !== last_disp_hour_dec_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_dec[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_dec_expected_prev);
		$display ("     Real value = %b", disp_hour_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_hour_dec_exp[0] = disp_hour_dec_expected_prev[0];
	end
	if (
		( disp_hour_dec_expected_prev[1] !== 1'bx ) && ( disp_hour_dec_prev[1] !== disp_hour_dec_expected_prev[1] )
		&& ((disp_hour_dec_expected_prev[1] !== last_disp_hour_dec_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_dec[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_dec_expected_prev);
		$display ("     Real value = %b", disp_hour_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_hour_dec_exp[1] = disp_hour_dec_expected_prev[1];
	end
	if (
		( disp_hour_dec_expected_prev[2] !== 1'bx ) && ( disp_hour_dec_prev[2] !== disp_hour_dec_expected_prev[2] )
		&& ((disp_hour_dec_expected_prev[2] !== last_disp_hour_dec_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_dec[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_dec_expected_prev);
		$display ("     Real value = %b", disp_hour_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_hour_dec_exp[2] = disp_hour_dec_expected_prev[2];
	end
	if (
		( disp_hour_dec_expected_prev[3] !== 1'bx ) && ( disp_hour_dec_prev[3] !== disp_hour_dec_expected_prev[3] )
		&& ((disp_hour_dec_expected_prev[3] !== last_disp_hour_dec_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_dec[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_dec_expected_prev);
		$display ("     Real value = %b", disp_hour_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_hour_dec_exp[3] = disp_hour_dec_expected_prev[3];
	end
	if (
		( disp_hour_dec_expected_prev[4] !== 1'bx ) && ( disp_hour_dec_prev[4] !== disp_hour_dec_expected_prev[4] )
		&& ((disp_hour_dec_expected_prev[4] !== last_disp_hour_dec_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_dec[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_dec_expected_prev);
		$display ("     Real value = %b", disp_hour_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_hour_dec_exp[4] = disp_hour_dec_expected_prev[4];
	end
	if (
		( disp_hour_dec_expected_prev[5] !== 1'bx ) && ( disp_hour_dec_prev[5] !== disp_hour_dec_expected_prev[5] )
		&& ((disp_hour_dec_expected_prev[5] !== last_disp_hour_dec_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_dec[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_dec_expected_prev);
		$display ("     Real value = %b", disp_hour_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_hour_dec_exp[5] = disp_hour_dec_expected_prev[5];
	end
	if (
		( disp_hour_dec_expected_prev[6] !== 1'bx ) && ( disp_hour_dec_prev[6] !== disp_hour_dec_expected_prev[6] )
		&& ((disp_hour_dec_expected_prev[6] !== last_disp_hour_dec_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_dec[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_dec_expected_prev);
		$display ("     Real value = %b", disp_hour_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_hour_dec_exp[6] = disp_hour_dec_expected_prev[6];
	end
	if (
		( disp_hour_units_expected_prev[0] !== 1'bx ) && ( disp_hour_units_prev[0] !== disp_hour_units_expected_prev[0] )
		&& ((disp_hour_units_expected_prev[0] !== last_disp_hour_units_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_units[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_units_expected_prev);
		$display ("     Real value = %b", disp_hour_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_hour_units_exp[0] = disp_hour_units_expected_prev[0];
	end
	if (
		( disp_hour_units_expected_prev[1] !== 1'bx ) && ( disp_hour_units_prev[1] !== disp_hour_units_expected_prev[1] )
		&& ((disp_hour_units_expected_prev[1] !== last_disp_hour_units_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_units[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_units_expected_prev);
		$display ("     Real value = %b", disp_hour_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_hour_units_exp[1] = disp_hour_units_expected_prev[1];
	end
	if (
		( disp_hour_units_expected_prev[2] !== 1'bx ) && ( disp_hour_units_prev[2] !== disp_hour_units_expected_prev[2] )
		&& ((disp_hour_units_expected_prev[2] !== last_disp_hour_units_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_units[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_units_expected_prev);
		$display ("     Real value = %b", disp_hour_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_hour_units_exp[2] = disp_hour_units_expected_prev[2];
	end
	if (
		( disp_hour_units_expected_prev[3] !== 1'bx ) && ( disp_hour_units_prev[3] !== disp_hour_units_expected_prev[3] )
		&& ((disp_hour_units_expected_prev[3] !== last_disp_hour_units_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_units[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_units_expected_prev);
		$display ("     Real value = %b", disp_hour_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_hour_units_exp[3] = disp_hour_units_expected_prev[3];
	end
	if (
		( disp_hour_units_expected_prev[4] !== 1'bx ) && ( disp_hour_units_prev[4] !== disp_hour_units_expected_prev[4] )
		&& ((disp_hour_units_expected_prev[4] !== last_disp_hour_units_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_units[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_units_expected_prev);
		$display ("     Real value = %b", disp_hour_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_hour_units_exp[4] = disp_hour_units_expected_prev[4];
	end
	if (
		( disp_hour_units_expected_prev[5] !== 1'bx ) && ( disp_hour_units_prev[5] !== disp_hour_units_expected_prev[5] )
		&& ((disp_hour_units_expected_prev[5] !== last_disp_hour_units_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_units[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_units_expected_prev);
		$display ("     Real value = %b", disp_hour_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_hour_units_exp[5] = disp_hour_units_expected_prev[5];
	end
	if (
		( disp_hour_units_expected_prev[6] !== 1'bx ) && ( disp_hour_units_prev[6] !== disp_hour_units_expected_prev[6] )
		&& ((disp_hour_units_expected_prev[6] !== last_disp_hour_units_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_hour_units[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_hour_units_expected_prev);
		$display ("     Real value = %b", disp_hour_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_hour_units_exp[6] = disp_hour_units_expected_prev[6];
	end
	if (
		( disp_min_dec_expected_prev[0] !== 1'bx ) && ( disp_min_dec_prev[0] !== disp_min_dec_expected_prev[0] )
		&& ((disp_min_dec_expected_prev[0] !== last_disp_min_dec_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_dec[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_dec_expected_prev);
		$display ("     Real value = %b", disp_min_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_min_dec_exp[0] = disp_min_dec_expected_prev[0];
	end
	if (
		( disp_min_dec_expected_prev[1] !== 1'bx ) && ( disp_min_dec_prev[1] !== disp_min_dec_expected_prev[1] )
		&& ((disp_min_dec_expected_prev[1] !== last_disp_min_dec_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_dec[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_dec_expected_prev);
		$display ("     Real value = %b", disp_min_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_min_dec_exp[1] = disp_min_dec_expected_prev[1];
	end
	if (
		( disp_min_dec_expected_prev[2] !== 1'bx ) && ( disp_min_dec_prev[2] !== disp_min_dec_expected_prev[2] )
		&& ((disp_min_dec_expected_prev[2] !== last_disp_min_dec_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_dec[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_dec_expected_prev);
		$display ("     Real value = %b", disp_min_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_min_dec_exp[2] = disp_min_dec_expected_prev[2];
	end
	if (
		( disp_min_dec_expected_prev[3] !== 1'bx ) && ( disp_min_dec_prev[3] !== disp_min_dec_expected_prev[3] )
		&& ((disp_min_dec_expected_prev[3] !== last_disp_min_dec_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_dec[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_dec_expected_prev);
		$display ("     Real value = %b", disp_min_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_min_dec_exp[3] = disp_min_dec_expected_prev[3];
	end
	if (
		( disp_min_dec_expected_prev[4] !== 1'bx ) && ( disp_min_dec_prev[4] !== disp_min_dec_expected_prev[4] )
		&& ((disp_min_dec_expected_prev[4] !== last_disp_min_dec_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_dec[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_dec_expected_prev);
		$display ("     Real value = %b", disp_min_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_min_dec_exp[4] = disp_min_dec_expected_prev[4];
	end
	if (
		( disp_min_dec_expected_prev[5] !== 1'bx ) && ( disp_min_dec_prev[5] !== disp_min_dec_expected_prev[5] )
		&& ((disp_min_dec_expected_prev[5] !== last_disp_min_dec_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_dec[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_dec_expected_prev);
		$display ("     Real value = %b", disp_min_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_min_dec_exp[5] = disp_min_dec_expected_prev[5];
	end
	if (
		( disp_min_dec_expected_prev[6] !== 1'bx ) && ( disp_min_dec_prev[6] !== disp_min_dec_expected_prev[6] )
		&& ((disp_min_dec_expected_prev[6] !== last_disp_min_dec_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_dec[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_dec_expected_prev);
		$display ("     Real value = %b", disp_min_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp_min_dec_exp[6] = disp_min_dec_expected_prev[6];
	end
	if (
		( disp_min_units_expected_prev[0] !== 1'bx ) && ( disp_min_units_prev[0] !== disp_min_units_expected_prev[0] )
		&& ((disp_min_units_expected_prev[0] !== last_disp_min_units_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_units[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_units_expected_prev);
		$display ("     Real value = %b", disp_min_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_disp_min_units_exp[0] = disp_min_units_expected_prev[0];
	end
	if (
		( disp_min_units_expected_prev[1] !== 1'bx ) && ( disp_min_units_prev[1] !== disp_min_units_expected_prev[1] )
		&& ((disp_min_units_expected_prev[1] !== last_disp_min_units_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_units[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_units_expected_prev);
		$display ("     Real value = %b", disp_min_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_disp_min_units_exp[1] = disp_min_units_expected_prev[1];
	end
	if (
		( disp_min_units_expected_prev[2] !== 1'bx ) && ( disp_min_units_prev[2] !== disp_min_units_expected_prev[2] )
		&& ((disp_min_units_expected_prev[2] !== last_disp_min_units_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_units[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_units_expected_prev);
		$display ("     Real value = %b", disp_min_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_disp_min_units_exp[2] = disp_min_units_expected_prev[2];
	end
	if (
		( disp_min_units_expected_prev[3] !== 1'bx ) && ( disp_min_units_prev[3] !== disp_min_units_expected_prev[3] )
		&& ((disp_min_units_expected_prev[3] !== last_disp_min_units_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_units[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_units_expected_prev);
		$display ("     Real value = %b", disp_min_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_disp_min_units_exp[3] = disp_min_units_expected_prev[3];
	end
	if (
		( disp_min_units_expected_prev[4] !== 1'bx ) && ( disp_min_units_prev[4] !== disp_min_units_expected_prev[4] )
		&& ((disp_min_units_expected_prev[4] !== last_disp_min_units_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_units[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_units_expected_prev);
		$display ("     Real value = %b", disp_min_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_disp_min_units_exp[4] = disp_min_units_expected_prev[4];
	end
	if (
		( disp_min_units_expected_prev[5] !== 1'bx ) && ( disp_min_units_prev[5] !== disp_min_units_expected_prev[5] )
		&& ((disp_min_units_expected_prev[5] !== last_disp_min_units_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_units[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_units_expected_prev);
		$display ("     Real value = %b", disp_min_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_disp_min_units_exp[5] = disp_min_units_expected_prev[5];
	end
	if (
		( disp_min_units_expected_prev[6] !== 1'bx ) && ( disp_min_units_prev[6] !== disp_min_units_expected_prev[6] )
		&& ((disp_min_units_expected_prev[6] !== last_disp_min_units_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_min_units[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_min_units_expected_prev);
		$display ("     Real value = %b", disp_min_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_disp_min_units_exp[6] = disp_min_units_expected_prev[6];
	end
	if (
		( disp_sec_dec_expected_prev[0] !== 1'bx ) && ( disp_sec_dec_prev[0] !== disp_sec_dec_expected_prev[0] )
		&& ((disp_sec_dec_expected_prev[0] !== last_disp_sec_dec_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_dec[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_dec_expected_prev);
		$display ("     Real value = %b", disp_sec_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_disp_sec_dec_exp[0] = disp_sec_dec_expected_prev[0];
	end
	if (
		( disp_sec_dec_expected_prev[1] !== 1'bx ) && ( disp_sec_dec_prev[1] !== disp_sec_dec_expected_prev[1] )
		&& ((disp_sec_dec_expected_prev[1] !== last_disp_sec_dec_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_dec[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_dec_expected_prev);
		$display ("     Real value = %b", disp_sec_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_disp_sec_dec_exp[1] = disp_sec_dec_expected_prev[1];
	end
	if (
		( disp_sec_dec_expected_prev[2] !== 1'bx ) && ( disp_sec_dec_prev[2] !== disp_sec_dec_expected_prev[2] )
		&& ((disp_sec_dec_expected_prev[2] !== last_disp_sec_dec_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_dec[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_dec_expected_prev);
		$display ("     Real value = %b", disp_sec_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_disp_sec_dec_exp[2] = disp_sec_dec_expected_prev[2];
	end
	if (
		( disp_sec_dec_expected_prev[3] !== 1'bx ) && ( disp_sec_dec_prev[3] !== disp_sec_dec_expected_prev[3] )
		&& ((disp_sec_dec_expected_prev[3] !== last_disp_sec_dec_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_dec[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_dec_expected_prev);
		$display ("     Real value = %b", disp_sec_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_disp_sec_dec_exp[3] = disp_sec_dec_expected_prev[3];
	end
	if (
		( disp_sec_dec_expected_prev[4] !== 1'bx ) && ( disp_sec_dec_prev[4] !== disp_sec_dec_expected_prev[4] )
		&& ((disp_sec_dec_expected_prev[4] !== last_disp_sec_dec_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_dec[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_dec_expected_prev);
		$display ("     Real value = %b", disp_sec_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_disp_sec_dec_exp[4] = disp_sec_dec_expected_prev[4];
	end
	if (
		( disp_sec_dec_expected_prev[5] !== 1'bx ) && ( disp_sec_dec_prev[5] !== disp_sec_dec_expected_prev[5] )
		&& ((disp_sec_dec_expected_prev[5] !== last_disp_sec_dec_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_dec[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_dec_expected_prev);
		$display ("     Real value = %b", disp_sec_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_disp_sec_dec_exp[5] = disp_sec_dec_expected_prev[5];
	end
	if (
		( disp_sec_dec_expected_prev[6] !== 1'bx ) && ( disp_sec_dec_prev[6] !== disp_sec_dec_expected_prev[6] )
		&& ((disp_sec_dec_expected_prev[6] !== last_disp_sec_dec_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_dec[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_dec_expected_prev);
		$display ("     Real value = %b", disp_sec_dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_disp_sec_dec_exp[6] = disp_sec_dec_expected_prev[6];
	end
	if (
		( disp_sec_units_expected_prev[0] !== 1'bx ) && ( disp_sec_units_prev[0] !== disp_sec_units_expected_prev[0] )
		&& ((disp_sec_units_expected_prev[0] !== last_disp_sec_units_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_units[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_units_expected_prev);
		$display ("     Real value = %b", disp_sec_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_disp_sec_units_exp[0] = disp_sec_units_expected_prev[0];
	end
	if (
		( disp_sec_units_expected_prev[1] !== 1'bx ) && ( disp_sec_units_prev[1] !== disp_sec_units_expected_prev[1] )
		&& ((disp_sec_units_expected_prev[1] !== last_disp_sec_units_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_units[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_units_expected_prev);
		$display ("     Real value = %b", disp_sec_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_disp_sec_units_exp[1] = disp_sec_units_expected_prev[1];
	end
	if (
		( disp_sec_units_expected_prev[2] !== 1'bx ) && ( disp_sec_units_prev[2] !== disp_sec_units_expected_prev[2] )
		&& ((disp_sec_units_expected_prev[2] !== last_disp_sec_units_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_units[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_units_expected_prev);
		$display ("     Real value = %b", disp_sec_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_disp_sec_units_exp[2] = disp_sec_units_expected_prev[2];
	end
	if (
		( disp_sec_units_expected_prev[3] !== 1'bx ) && ( disp_sec_units_prev[3] !== disp_sec_units_expected_prev[3] )
		&& ((disp_sec_units_expected_prev[3] !== last_disp_sec_units_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_units[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_units_expected_prev);
		$display ("     Real value = %b", disp_sec_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_disp_sec_units_exp[3] = disp_sec_units_expected_prev[3];
	end
	if (
		( disp_sec_units_expected_prev[4] !== 1'bx ) && ( disp_sec_units_prev[4] !== disp_sec_units_expected_prev[4] )
		&& ((disp_sec_units_expected_prev[4] !== last_disp_sec_units_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_units[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_units_expected_prev);
		$display ("     Real value = %b", disp_sec_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_disp_sec_units_exp[4] = disp_sec_units_expected_prev[4];
	end
	if (
		( disp_sec_units_expected_prev[5] !== 1'bx ) && ( disp_sec_units_prev[5] !== disp_sec_units_expected_prev[5] )
		&& ((disp_sec_units_expected_prev[5] !== last_disp_sec_units_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_units[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_units_expected_prev);
		$display ("     Real value = %b", disp_sec_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_disp_sec_units_exp[5] = disp_sec_units_expected_prev[5];
	end
	if (
		( disp_sec_units_expected_prev[6] !== 1'bx ) && ( disp_sec_units_prev[6] !== disp_sec_units_expected_prev[6] )
		&& ((disp_sec_units_expected_prev[6] !== last_disp_sec_units_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_sec_units[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_sec_units_expected_prev);
		$display ("     Real value = %b", disp_sec_units_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_disp_sec_units_exp[6] = disp_sec_units_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module labII_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_28MHz;
reg hora_alarma;
// wires                                               
wire [6:0] disp_hour_dec;
wire [6:0] disp_hour_units;
wire [6:0] disp_min_dec;
wire [6:0] disp_min_units;
wire [6:0] disp_sec_dec;
wire [6:0] disp_sec_units;

wire sampler;                             

// assign statements (if any)                          
labII i1 (
// port map - connection between master ports and signals/registers   
	.clk_28MHz(clk_28MHz),
	.disp_hour_dec(disp_hour_dec),
	.disp_hour_units(disp_hour_units),
	.disp_min_dec(disp_min_dec),
	.disp_min_units(disp_min_units),
	.disp_sec_dec(disp_sec_dec),
	.disp_sec_units(disp_sec_units),
	.hora_alarma(hora_alarma)
);

// clk_28MHz
always
begin
	clk_28MHz = 1'b0;
	clk_28MHz = #5000 1'b1;
	#5000;
end 

// hora_alarma
initial
begin
	hora_alarma = 1'b1;
end 

labII_vlg_sample_tst tb_sample (
	.clk_28MHz(clk_28MHz),
	.hora_alarma(hora_alarma),
	.sampler_tx(sampler)
);

labII_vlg_check_tst tb_out(
	.disp_hour_dec(disp_hour_dec),
	.disp_hour_units(disp_hour_units),
	.disp_min_dec(disp_min_dec),
	.disp_min_units(disp_min_units),
	.disp_sec_dec(disp_sec_dec),
	.disp_sec_units(disp_sec_units),
	.sampler_rx(sampler)
);
endmodule

